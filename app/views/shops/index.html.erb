<div class="flex h-screen pt-5">
  <!-- 左側：地図 -->
  <div class="w-2/3 flex flex-col">
    <div id="map" class="h-2/3 w-full"></div>

  <!-- 左側：検索窓 -->
      <%= search_form_for @q, url: shops_path, method: :get, local: true, data: { turbo: false } do |f| %>
      <div class="flex flex-col md:flex-row items-stretch md:items-end gap-2 pt-2">
        <!-- 1) カテゴリ -->
        <div class="w-full md:basis-0 md:flex-1">
          <%= f.label :category_id_eq, "カテゴリ検索" %>
          <%= f.collection_select :category_id_eq, Category.all, :id, :name,
                { include_blank: "すべて" },
                class: "border px-1 py-2 rounded w-full bg-white" %>
        </div>

        <!-- 2) デートシーン -->
        <div class="w-full md:basis-0 md:flex-1">
          <%= f.label :scenes_id_eq, "デートシーン検索" %>
          <%= f.collection_select :scenes_id_eq, Scene.all, :id, :name,
                { include_blank: "すべて" },
                class: "border px-1 py-2 rounded w-full bg-white" %>
        </div>

        <!-- 3) キーワード -->
        <div class="w-full md:basis-0 md:flex-1">
          <%= f.label :title_or_address_cont, "キーワード検索" %>
          <div class="flex flex-col md:flex-row gap-2">
            <%= f.search_field :title_or_address_cont,
                  placeholder: "タイトルまたは住所",
                  class: "border px-2 py-2 rounded bg-white w-full" %>
            <%= f.submit "検索",
                  class: "bg-blue-500 text-white px-4 py-2 rounded whitespace-nowrap md:shrink-0" %>
          </div>
        </div>
      </div>
    <% end %>
  </div>

  <!-- 右側：お店一覧（地図と高さ合わせる） -->
  <div class="w-1/3 p-4 overflow-y-auto bg-white h-2/3">
    <h2 class="text-xl font-bold mb-4">お店一覧</h2>
    <% @shops.each do |shop| %>
      <div class="mb-4 border-b pb-2">
        <h3 class="text-lg font-semibold">
        <a href="#"
          class="text-black hover:text-blue-600 js-shop-title"
          data-shop-id="<%= shop.id %>">
          <%= shop.title %>
        </a>
        </h3>
          <p class="text-sm text-gray-600">
            カテゴリ: <%= shop.category&.name || "" %></p>
          <div class="flex">
            <%= link_to "お店詳細", shop_path(shop), target: "_blank", rel: "noopener noreferrer", class: "inline-block mt-1 text-sm text-black bg-yellow-300 hover:bg-yellow-500 px-3 py-1 rounded" %>
            <%= render 'shops/bookmark_button', shop: shop %>
          </div>
      </div>
    <% end %>
    <%#= paginate @shops %>
  </div>
</div>


<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap">
</script>

<script>
  const RED_ICON  = "https://maps.google.com/mapfiles/ms/icons/red-dot.png";
  const BLUE_ICON = "https://maps.google.com/mapfiles/ms/icons/blue-dot.png";

  const markersById = {}; // shop.id -> marker
  let infoWindow;

  // ① 追加：同一座標を円状に少しずらす関数（ライブラリ不要）
  function spreadSamePositionMarkers(raw) {
    const groups = {};
    raw.forEach(s => {
      // 小数6桁で丸めて“同一地点”を判定
      const key = `${(+s.la).toFixed(6)},${(+s.ln).toFixed(6)}`;
      (groups[key] ||= []).push(s);
    });

    const spread = [];
    Object.values(groups).forEach(list => {
      if (list.length === 1) { spread.push(list[0]); return; }

      const Rm = 12; // 半径(メートル) 好みで 8〜20 程度
      const lat0 = list[0].la, lng0 = list[0].ln;
      const latMeter = 1 / 111320;
      const lngMeter = 1 / (111320 * Math.cos(lat0 * Math.PI / 180));

      list.forEach((s, i) => {
        const angle = (2 * Math.PI * i) / list.length;
        const dLat = Rm * latMeter * Math.sin(angle);
        const dLng = Rm * lngMeter * Math.cos(angle);
        spread.push({ ...s, la: lat0 + dLat, ln: lng0 + dLng });
      });
    });
    return spread;
  }

  function initMap() {
    const map = new google.maps.Map(document.getElementById("map"), {
      zoom: 13,
      center: { lat: 35.170915, lng: 136.881537 }
    });

    infoWindow = new google.maps.InfoWindow();

    const YOU_ICON = {
      path: google.maps.SymbolPath.CIRCLE,
      fillColor: "#2563eb", fillOpacity: 1,
      strokeColor: "#ffffff", strokeWeight: 2,
      scale: 7, // 大きさ
    };

    // 一覧タイトルのクリック連動をセット
    bindListClicks(map);
    // 現在地ピンを追加（中心は動かさない）
    addCurrentLocationMarker(map);

    function bindListClicks(map) {
      document.querySelectorAll(".js-shop-title").forEach(el => {
        el.addEventListener("click", (e) => {
          e.preventDefault();
          const id = Number(el.dataset.shopId);
          highlightMarker(id, null, map);
        });
      });
    }
    function addCurrentLocationMarker(map) {
    if (!navigator.geolocation) return;

    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const { latitude: lat, longitude: lng, accuracy } = pos.coords;

        // 現在地ピン
        new google.maps.Marker({
          position: { lat, lng },
          map,
          icon: YOU_ICON,
          title: "現在地",
          zIndex: google.maps.Marker.MAX_ZINDEX + 1
        });


      },
      (err) => {
        // 許可なし/失敗時は何もしない（必要ならログ）
        console.warn("Geolocation error:", err);
      },
      { enableHighAccuracy: true, timeout: 10000, maximumAge: 60000 }
    );
  }



    // ② 変更：まずは生データを配列に集める
    const raw = [];
    <% @shops.each do |shop| %>
      <% if shop.latitude.present? && shop.longitude.present? %>
        (function() {
          const id       = <%= shop.id %>;
          const title    = "<%= j shop.title.to_s %>";
          const category = "<%= j(shop.category&.name.to_s) %>";
          const googleSearchUrl = "https://www.google.com/search?q=<%= ERB::Util.url_encode(shop.title.to_s) %>";

          raw.push({
            id: id,
            t: title,
            cat: category,
            url: googleSearchUrl,
            detail: "<%= j shop_path(shop) %>", 
            la: <%= shop.latitude %>,
            ln: <%= shop.longitude %>,
            scn: <%= raw shop.scenes.order(:name).pluck(:name).to_json %>
          });
        })();
      <% end %>
    <% end %>

    // ③ 追加：重なりをばらしてからマーカー生成
    const data = spreadSamePositionMarkers(raw);

    data.forEach(s => {
      const marker = new google.maps.Marker({
        position: { lat: s.la, lng: s.ln },
        map,
        title: s.t,
        icon: RED_ICON
      });

      const content = `
        <div style="padding:6px; min-width: 180px;">
          <div style="font-weight:600; margin-bottom:4px;">
          <a href="${s.detail}" target="_blank" rel="noopener noreferrer"
         class="text-inherit hover:text-blue-600 hover:underline">${s.t}</a>
         </div>

          ${s.cat ? `<div style="font-size:12px; color:#6b7280; margin-bottom:6px;">カテゴリ: ${s.cat}</div>` : ""}

          ${(s.scn && s.scn.length)
          ? `<div style="font-size:12px; color:#6b7280; margin-bottom:8px;">シーン: ${s.scn.join(" / ")}</div>`
          : ""}

          <a href="${s.url}" target="_blank" rel="noopener"
             style="display:inline-block; background:#2563eb; color:#fff; padding:4px 8px; border-radius:4px; font-size:12px; text-decoration:none;">
            Googleで検索
          </a>
        </div>
      `;

      marker.addListener("mouseover", () => {
        infoWindow.setContent(content);
        infoWindow.open({ anchor: marker, map });
      });

      marker.addListener("click", () => highlightMarker(s.id, marker, map));

      markersById[s.id] = marker;
    });

    // 一覧タイトルのクリック連動をセット
    bindListClicks(map);
  }

  // 全部赤に戻して、指定マーカーだけ青＆センター
  function highlightMarker(id, marker, map) {
    Object.values(markersById).forEach(m => m.setIcon(RED_ICON));
    (marker || markersById[id])?.setIcon(BLUE_ICON);

    const target = marker || markersById[id];
    if (!target) return;
    map.panTo(target.getPosition());
    if (map.getZoom() < 15) map.setZoom(15);
  }

  window.initMap = initMap;

</script>
